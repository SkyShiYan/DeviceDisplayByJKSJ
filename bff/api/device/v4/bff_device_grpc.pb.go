// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v4

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BffDeviceClient is the client API for BffDevice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BffDeviceClient interface {
	// 注册或更新设备
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	// 修改设备名称
	ChangeName(ctx context.Context, in *ChangeNameRequest, opts ...grpc.CallOption) (*ChangeNameReply, error)
	// 预部署
	Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployReply, error)
}

type bffDeviceClient struct {
	cc grpc.ClientConnInterface
}

func NewBffDeviceClient(cc grpc.ClientConnInterface) BffDeviceClient {
	return &bffDeviceClient{cc}
}

func (c *bffDeviceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/device.v4.BffDevice/register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bffDeviceClient) ChangeName(ctx context.Context, in *ChangeNameRequest, opts ...grpc.CallOption) (*ChangeNameReply, error) {
	out := new(ChangeNameReply)
	err := c.cc.Invoke(ctx, "/device.v4.BffDevice/changeName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bffDeviceClient) Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployReply, error) {
	out := new(DeployReply)
	err := c.cc.Invoke(ctx, "/device.v4.BffDevice/deploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BffDeviceServer is the server API for BffDevice service.
// All implementations must embed UnimplementedBffDeviceServer
// for forward compatibility
type BffDeviceServer interface {
	// 注册或更新设备
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	// 修改设备名称
	ChangeName(context.Context, *ChangeNameRequest) (*ChangeNameReply, error)
	// 预部署
	Deploy(context.Context, *DeployRequest) (*DeployReply, error)
	mustEmbedUnimplementedBffDeviceServer()
}

// UnimplementedBffDeviceServer must be embedded to have forward compatible implementations.
type UnimplementedBffDeviceServer struct {
}

func (UnimplementedBffDeviceServer) Register(context.Context, *RegisterRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedBffDeviceServer) ChangeName(context.Context, *ChangeNameRequest) (*ChangeNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeName not implemented")
}
func (UnimplementedBffDeviceServer) Deploy(context.Context, *DeployRequest) (*DeployReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deploy not implemented")
}
func (UnimplementedBffDeviceServer) mustEmbedUnimplementedBffDeviceServer() {}

// UnsafeBffDeviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BffDeviceServer will
// result in compilation errors.
type UnsafeBffDeviceServer interface {
	mustEmbedUnimplementedBffDeviceServer()
}

func RegisterBffDeviceServer(s grpc.ServiceRegistrar, srv BffDeviceServer) {
	s.RegisterService(&BffDevice_ServiceDesc, srv)
}

func _BffDevice_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BffDeviceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.v4.BffDevice/register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BffDeviceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BffDevice_ChangeName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BffDeviceServer).ChangeName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.v4.BffDevice/changeName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BffDeviceServer).ChangeName(ctx, req.(*ChangeNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BffDevice_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BffDeviceServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.v4.BffDevice/deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BffDeviceServer).Deploy(ctx, req.(*DeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BffDevice_ServiceDesc is the grpc.ServiceDesc for BffDevice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BffDevice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "device.v4.BffDevice",
	HandlerType: (*BffDeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "register",
			Handler:    _BffDevice_Register_Handler,
		},
		{
			MethodName: "changeName",
			Handler:    _BffDevice_ChangeName_Handler,
		},
		{
			MethodName: "deploy",
			Handler:    _BffDevice_Deploy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/device/v4/bff_device.proto",
}
