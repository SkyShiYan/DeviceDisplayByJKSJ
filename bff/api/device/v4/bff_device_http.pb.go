// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.1

package v4

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type BffDeviceHTTPServer interface {
	ChangeName(context.Context, *ChangeNameRequest) (*ChangeNameReply, error)
	GetDevice(context.Context, *GetDeviceRequest) (*GetDeviceReply, error)
	GetDeviceDisplay(context.Context, *GetDeviceDisplayRequest) (*GetDeviceDisplayReply, error)
	RegisteDevice(context.Context, *RegisterRequest) (*RegisterReply, error)
}

func RegisterBffDeviceHTTPServer(s *http.Server, srv BffDeviceHTTPServer) {
	r := s.Route("/")
	r.POST("/registerDisplay", _BffDevice_RegisteDevice0_HTTP_Handler(srv))
	r.PUT("/changeDisplayName", _BffDevice_ChangeName0_HTTP_Handler(srv))
	r.GET("/getDevice/{hardwareKey}", _BffDevice_GetDevice0_HTTP_Handler(srv))
	r.GET("/getDeviceDisplay/{hardwareKey}", _BffDevice_GetDeviceDisplay0_HTTP_Handler(srv))
}

func _BffDevice_RegisteDevice0_HTTP_Handler(srv BffDeviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/device.v4.BffDevice/RegisteDevice")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RegisteDevice(ctx, req.(*RegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterReply)
		return ctx.Result(200, reply)
	}
}

func _BffDevice_ChangeName0_HTTP_Handler(srv BffDeviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ChangeNameRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/device.v4.BffDevice/ChangeName")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ChangeName(ctx, req.(*ChangeNameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ChangeNameReply)
		return ctx.Result(200, reply)
	}
}

func _BffDevice_GetDevice0_HTTP_Handler(srv BffDeviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDeviceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/device.v4.BffDevice/GetDevice")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDevice(ctx, req.(*GetDeviceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDeviceReply)
		return ctx.Result(200, reply)
	}
}

func _BffDevice_GetDeviceDisplay0_HTTP_Handler(srv BffDeviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDeviceDisplayRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/device.v4.BffDevice/GetDeviceDisplay")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDeviceDisplay(ctx, req.(*GetDeviceDisplayRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDeviceDisplayReply)
		return ctx.Result(200, reply)
	}
}

type BffDeviceHTTPClient interface {
	ChangeName(ctx context.Context, req *ChangeNameRequest, opts ...http.CallOption) (rsp *ChangeNameReply, err error)
	GetDevice(ctx context.Context, req *GetDeviceRequest, opts ...http.CallOption) (rsp *GetDeviceReply, err error)
	GetDeviceDisplay(ctx context.Context, req *GetDeviceDisplayRequest, opts ...http.CallOption) (rsp *GetDeviceDisplayReply, err error)
	RegisteDevice(ctx context.Context, req *RegisterRequest, opts ...http.CallOption) (rsp *RegisterReply, err error)
}

type BffDeviceHTTPClientImpl struct {
	cc *http.Client
}

func NewBffDeviceHTTPClient(client *http.Client) BffDeviceHTTPClient {
	return &BffDeviceHTTPClientImpl{client}
}

func (c *BffDeviceHTTPClientImpl) ChangeName(ctx context.Context, in *ChangeNameRequest, opts ...http.CallOption) (*ChangeNameReply, error) {
	var out ChangeNameReply
	pattern := "/changeDisplayName"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/device.v4.BffDevice/ChangeName"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffDeviceHTTPClientImpl) GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...http.CallOption) (*GetDeviceReply, error) {
	var out GetDeviceReply
	pattern := "/getDevice/{hardwareKey}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/device.v4.BffDevice/GetDevice"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffDeviceHTTPClientImpl) GetDeviceDisplay(ctx context.Context, in *GetDeviceDisplayRequest, opts ...http.CallOption) (*GetDeviceDisplayReply, error) {
	var out GetDeviceDisplayReply
	pattern := "/getDeviceDisplay/{hardwareKey}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/device.v4.BffDevice/GetDeviceDisplay"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffDeviceHTTPClientImpl) RegisteDevice(ctx context.Context, in *RegisterRequest, opts ...http.CallOption) (*RegisterReply, error) {
	var out RegisterReply
	pattern := "/registerDisplay"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/device.v4.BffDevice/RegisteDevice"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
