// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v4

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientDeviceClient is the client API for ClientDevice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientDeviceClient interface {
	// 获取设备
	GetDeviceByKey(ctx context.Context, in *GetDeviceByKeyRequest, opts ...grpc.CallOption) (*GetDeviceByKeyReply, error)
	// 新增设备信息
	AddDeviceByKey(ctx context.Context, in *AddDeviceByKeyRequest, opts ...grpc.CallOption) (*AddDeviceByKeyReply, error)
	// 更新设备信息
	UpdateDeviceByKey(ctx context.Context, in *UpdateDeviceByKeyRequest, opts ...grpc.CallOption) (*UpdateDeviceByKeyReply, error)
}

type clientDeviceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientDeviceClient(cc grpc.ClientConnInterface) ClientDeviceClient {
	return &clientDeviceClient{cc}
}

func (c *clientDeviceClient) GetDeviceByKey(ctx context.Context, in *GetDeviceByKeyRequest, opts ...grpc.CallOption) (*GetDeviceByKeyReply, error) {
	out := new(GetDeviceByKeyReply)
	err := c.cc.Invoke(ctx, "/device.v4.ClientDevice/getDeviceByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientDeviceClient) AddDeviceByKey(ctx context.Context, in *AddDeviceByKeyRequest, opts ...grpc.CallOption) (*AddDeviceByKeyReply, error) {
	out := new(AddDeviceByKeyReply)
	err := c.cc.Invoke(ctx, "/device.v4.ClientDevice/addDeviceByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientDeviceClient) UpdateDeviceByKey(ctx context.Context, in *UpdateDeviceByKeyRequest, opts ...grpc.CallOption) (*UpdateDeviceByKeyReply, error) {
	out := new(UpdateDeviceByKeyReply)
	err := c.cc.Invoke(ctx, "/device.v4.ClientDevice/updateDeviceByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientDeviceServer is the server API for ClientDevice service.
// All implementations must embed UnimplementedClientDeviceServer
// for forward compatibility
type ClientDeviceServer interface {
	// 获取设备
	GetDeviceByKey(context.Context, *GetDeviceByKeyRequest) (*GetDeviceByKeyReply, error)
	// 新增设备信息
	AddDeviceByKey(context.Context, *AddDeviceByKeyRequest) (*AddDeviceByKeyReply, error)
	// 更新设备信息
	UpdateDeviceByKey(context.Context, *UpdateDeviceByKeyRequest) (*UpdateDeviceByKeyReply, error)
	mustEmbedUnimplementedClientDeviceServer()
}

// UnimplementedClientDeviceServer must be embedded to have forward compatible implementations.
type UnimplementedClientDeviceServer struct {
}

func (UnimplementedClientDeviceServer) GetDeviceByKey(context.Context, *GetDeviceByKeyRequest) (*GetDeviceByKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceByKey not implemented")
}
func (UnimplementedClientDeviceServer) AddDeviceByKey(context.Context, *AddDeviceByKeyRequest) (*AddDeviceByKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDeviceByKey not implemented")
}
func (UnimplementedClientDeviceServer) UpdateDeviceByKey(context.Context, *UpdateDeviceByKeyRequest) (*UpdateDeviceByKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceByKey not implemented")
}
func (UnimplementedClientDeviceServer) mustEmbedUnimplementedClientDeviceServer() {}

// UnsafeClientDeviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientDeviceServer will
// result in compilation errors.
type UnsafeClientDeviceServer interface {
	mustEmbedUnimplementedClientDeviceServer()
}

func RegisterClientDeviceServer(s grpc.ServiceRegistrar, srv ClientDeviceServer) {
	s.RegisterService(&ClientDevice_ServiceDesc, srv)
}

func _ClientDevice_GetDeviceByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceByKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientDeviceServer).GetDeviceByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.v4.ClientDevice/getDeviceByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientDeviceServer).GetDeviceByKey(ctx, req.(*GetDeviceByKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientDevice_AddDeviceByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDeviceByKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientDeviceServer).AddDeviceByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.v4.ClientDevice/addDeviceByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientDeviceServer).AddDeviceByKey(ctx, req.(*AddDeviceByKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientDevice_UpdateDeviceByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceByKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientDeviceServer).UpdateDeviceByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.v4.ClientDevice/updateDeviceByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientDeviceServer).UpdateDeviceByKey(ctx, req.(*UpdateDeviceByKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientDevice_ServiceDesc is the grpc.ServiceDesc for ClientDevice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientDevice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "device.v4.ClientDevice",
	HandlerType: (*ClientDeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getDeviceByKey",
			Handler:    _ClientDevice_GetDeviceByKey_Handler,
		},
		{
			MethodName: "addDeviceByKey",
			Handler:    _ClientDevice_AddDeviceByKey_Handler,
		},
		{
			MethodName: "updateDeviceByKey",
			Handler:    _ClientDevice_UpdateDeviceByKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/device/v4/client_device.proto",
}
