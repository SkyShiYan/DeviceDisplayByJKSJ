// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.1

package v4

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type ClientDeviceHTTPServer interface {
	AddDeviceByKey(context.Context, *AddDeviceByKeyRequest) (*AddDeviceByKeyReply, error)
	GetDeviceByKey(context.Context, *GetDeviceByKeyRequest) (*GetDeviceByKeyReply, error)
	UpdateDeviceByKey(context.Context, *UpdateDeviceByKeyRequest) (*UpdateDeviceByKeyReply, error)
}

func RegisterClientDeviceHTTPServer(s *http.Server, srv ClientDeviceHTTPServer) {
	r := s.Route("/")
	r.POST("/getDeviceByKey", _ClientDevice_GetDeviceByKey0_HTTP_Handler(srv))
	r.POST("/addDeviceByKey", _ClientDevice_AddDeviceByKey0_HTTP_Handler(srv))
	r.POST("/updateDeviceByKey", _ClientDevice_UpdateDeviceByKey0_HTTP_Handler(srv))
}

func _ClientDevice_GetDeviceByKey0_HTTP_Handler(srv ClientDeviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDeviceByKeyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/device.v4.ClientDevice/GetDeviceByKey")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDeviceByKey(ctx, req.(*GetDeviceByKeyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDeviceByKeyReply)
		return ctx.Result(200, reply)
	}
}

func _ClientDevice_AddDeviceByKey0_HTTP_Handler(srv ClientDeviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddDeviceByKeyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/device.v4.ClientDevice/AddDeviceByKey")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddDeviceByKey(ctx, req.(*AddDeviceByKeyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddDeviceByKeyReply)
		return ctx.Result(200, reply)
	}
}

func _ClientDevice_UpdateDeviceByKey0_HTTP_Handler(srv ClientDeviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDeviceByKeyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/device.v4.ClientDevice/UpdateDeviceByKey")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDeviceByKey(ctx, req.(*UpdateDeviceByKeyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDeviceByKeyReply)
		return ctx.Result(200, reply)
	}
}

type ClientDeviceHTTPClient interface {
	AddDeviceByKey(ctx context.Context, req *AddDeviceByKeyRequest, opts ...http.CallOption) (rsp *AddDeviceByKeyReply, err error)
	GetDeviceByKey(ctx context.Context, req *GetDeviceByKeyRequest, opts ...http.CallOption) (rsp *GetDeviceByKeyReply, err error)
	UpdateDeviceByKey(ctx context.Context, req *UpdateDeviceByKeyRequest, opts ...http.CallOption) (rsp *UpdateDeviceByKeyReply, err error)
}

type ClientDeviceHTTPClientImpl struct {
	cc *http.Client
}

func NewClientDeviceHTTPClient(client *http.Client) ClientDeviceHTTPClient {
	return &ClientDeviceHTTPClientImpl{client}
}

func (c *ClientDeviceHTTPClientImpl) AddDeviceByKey(ctx context.Context, in *AddDeviceByKeyRequest, opts ...http.CallOption) (*AddDeviceByKeyReply, error) {
	var out AddDeviceByKeyReply
	pattern := "/addDeviceByKey"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/device.v4.ClientDevice/AddDeviceByKey"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClientDeviceHTTPClientImpl) GetDeviceByKey(ctx context.Context, in *GetDeviceByKeyRequest, opts ...http.CallOption) (*GetDeviceByKeyReply, error) {
	var out GetDeviceByKeyReply
	pattern := "/getDeviceByKey"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/device.v4.ClientDevice/GetDeviceByKey"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClientDeviceHTTPClientImpl) UpdateDeviceByKey(ctx context.Context, in *UpdateDeviceByKeyRequest, opts ...http.CallOption) (*UpdateDeviceByKeyReply, error) {
	var out UpdateDeviceByKeyReply
	pattern := "/updateDeviceByKey"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/device.v4.ClientDevice/UpdateDeviceByKey"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
