// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.1

package v4

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type LayoutHTTPServer interface {
	GetDeviceResourceList(context.Context, *LayoutResourceRequest) (*LayoutResourceReply, error)
}

func RegisterLayoutHTTPServer(s *http.Server, srv LayoutHTTPServer) {
	r := s.Route("/")
	r.GET("/getDeviceResourceList", _Layout_GetDeviceResourceList0_HTTP_Handler(srv))
}

func _Layout_GetDeviceResourceList0_HTTP_Handler(srv LayoutHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LayoutResourceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/layout.v4.Layout/GetDeviceResourceList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDeviceResourceList(ctx, req.(*LayoutResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LayoutResourceReply)
		return ctx.Result(200, reply)
	}
}

type LayoutHTTPClient interface {
	GetDeviceResourceList(ctx context.Context, req *LayoutResourceRequest, opts ...http.CallOption) (rsp *LayoutResourceReply, err error)
}

type LayoutHTTPClientImpl struct {
	cc *http.Client
}

func NewLayoutHTTPClient(client *http.Client) LayoutHTTPClient {
	return &LayoutHTTPClientImpl{client}
}

func (c *LayoutHTTPClientImpl) GetDeviceResourceList(ctx context.Context, in *LayoutResourceRequest, opts ...http.CallOption) (*LayoutResourceReply, error) {
	var out LayoutResourceReply
	pattern := "/getDeviceResourceList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/layout.v4.Layout/GetDeviceResourceList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
