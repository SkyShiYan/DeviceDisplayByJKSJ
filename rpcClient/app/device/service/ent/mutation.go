// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"rpcClient/app/device/service/ent/device"
	"rpcClient/app/device/service/ent/predicate"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDevice = "Device"
)

// DeviceMutation represents an operation that mutates the Device nodes in the graph.
type DeviceMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	name               *string
	hardwareKey        *string
	defaultLayoutId    *int32
	adddefaultLayoutId *int32
	status             *int32
	addstatus          *int32
	storeNumber        *string
	createdAt          *time.Time
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*Device, error)
	predicates         []predicate.Device
}

var _ ent.Mutation = (*DeviceMutation)(nil)

// deviceOption allows management of the mutation configuration using functional options.
type deviceOption func(*DeviceMutation)

// newDeviceMutation creates new mutation for the Device entity.
func newDeviceMutation(c config, op Op, opts ...deviceOption) *DeviceMutation {
	m := &DeviceMutation{
		config:        c,
		op:            op,
		typ:           TypeDevice,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDeviceID sets the ID field of the mutation.
func withDeviceID(id int) deviceOption {
	return func(m *DeviceMutation) {
		var (
			err   error
			once  sync.Once
			value *Device
		)
		m.oldValue = func(ctx context.Context) (*Device, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Device.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDevice sets the old Device of the mutation.
func withDevice(node *Device) deviceOption {
	return func(m *DeviceMutation) {
		m.oldValue = func(context.Context) (*Device, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DeviceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DeviceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DeviceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *DeviceMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DeviceMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *DeviceMutation) ClearName() {
	m.name = nil
	m.clearedFields[device.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *DeviceMutation) NameCleared() bool {
	_, ok := m.clearedFields[device.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *DeviceMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, device.FieldName)
}

// SetHardwareKey sets the "hardwareKey" field.
func (m *DeviceMutation) SetHardwareKey(s string) {
	m.hardwareKey = &s
}

// HardwareKey returns the value of the "hardwareKey" field in the mutation.
func (m *DeviceMutation) HardwareKey() (r string, exists bool) {
	v := m.hardwareKey
	if v == nil {
		return
	}
	return *v, true
}

// OldHardwareKey returns the old "hardwareKey" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldHardwareKey(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHardwareKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHardwareKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHardwareKey: %w", err)
	}
	return oldValue.HardwareKey, nil
}

// ClearHardwareKey clears the value of the "hardwareKey" field.
func (m *DeviceMutation) ClearHardwareKey() {
	m.hardwareKey = nil
	m.clearedFields[device.FieldHardwareKey] = struct{}{}
}

// HardwareKeyCleared returns if the "hardwareKey" field was cleared in this mutation.
func (m *DeviceMutation) HardwareKeyCleared() bool {
	_, ok := m.clearedFields[device.FieldHardwareKey]
	return ok
}

// ResetHardwareKey resets all changes to the "hardwareKey" field.
func (m *DeviceMutation) ResetHardwareKey() {
	m.hardwareKey = nil
	delete(m.clearedFields, device.FieldHardwareKey)
}

// SetDefaultLayoutId sets the "defaultLayoutId" field.
func (m *DeviceMutation) SetDefaultLayoutId(i int32) {
	m.defaultLayoutId = &i
	m.adddefaultLayoutId = nil
}

// DefaultLayoutId returns the value of the "defaultLayoutId" field in the mutation.
func (m *DeviceMutation) DefaultLayoutId() (r int32, exists bool) {
	v := m.defaultLayoutId
	if v == nil {
		return
	}
	return *v, true
}

// OldDefaultLayoutId returns the old "defaultLayoutId" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldDefaultLayoutId(ctx context.Context) (v *int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDefaultLayoutId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDefaultLayoutId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDefaultLayoutId: %w", err)
	}
	return oldValue.DefaultLayoutId, nil
}

// AddDefaultLayoutId adds i to the "defaultLayoutId" field.
func (m *DeviceMutation) AddDefaultLayoutId(i int32) {
	if m.adddefaultLayoutId != nil {
		*m.adddefaultLayoutId += i
	} else {
		m.adddefaultLayoutId = &i
	}
}

// AddedDefaultLayoutId returns the value that was added to the "defaultLayoutId" field in this mutation.
func (m *DeviceMutation) AddedDefaultLayoutId() (r int32, exists bool) {
	v := m.adddefaultLayoutId
	if v == nil {
		return
	}
	return *v, true
}

// ClearDefaultLayoutId clears the value of the "defaultLayoutId" field.
func (m *DeviceMutation) ClearDefaultLayoutId() {
	m.defaultLayoutId = nil
	m.adddefaultLayoutId = nil
	m.clearedFields[device.FieldDefaultLayoutId] = struct{}{}
}

// DefaultLayoutIdCleared returns if the "defaultLayoutId" field was cleared in this mutation.
func (m *DeviceMutation) DefaultLayoutIdCleared() bool {
	_, ok := m.clearedFields[device.FieldDefaultLayoutId]
	return ok
}

// ResetDefaultLayoutId resets all changes to the "defaultLayoutId" field.
func (m *DeviceMutation) ResetDefaultLayoutId() {
	m.defaultLayoutId = nil
	m.adddefaultLayoutId = nil
	delete(m.clearedFields, device.FieldDefaultLayoutId)
}

// SetStatus sets the "status" field.
func (m *DeviceMutation) SetStatus(i int32) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *DeviceMutation) Status() (r int32, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldStatus(ctx context.Context) (v *int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *DeviceMutation) AddStatus(i int32) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *DeviceMutation) AddedStatus() (r int32, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatus clears the value of the "status" field.
func (m *DeviceMutation) ClearStatus() {
	m.status = nil
	m.addstatus = nil
	m.clearedFields[device.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *DeviceMutation) StatusCleared() bool {
	_, ok := m.clearedFields[device.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *DeviceMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
	delete(m.clearedFields, device.FieldStatus)
}

// SetStoreNumber sets the "storeNumber" field.
func (m *DeviceMutation) SetStoreNumber(s string) {
	m.storeNumber = &s
}

// StoreNumber returns the value of the "storeNumber" field in the mutation.
func (m *DeviceMutation) StoreNumber() (r string, exists bool) {
	v := m.storeNumber
	if v == nil {
		return
	}
	return *v, true
}

// OldStoreNumber returns the old "storeNumber" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldStoreNumber(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStoreNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStoreNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStoreNumber: %w", err)
	}
	return oldValue.StoreNumber, nil
}

// ClearStoreNumber clears the value of the "storeNumber" field.
func (m *DeviceMutation) ClearStoreNumber() {
	m.storeNumber = nil
	m.clearedFields[device.FieldStoreNumber] = struct{}{}
}

// StoreNumberCleared returns if the "storeNumber" field was cleared in this mutation.
func (m *DeviceMutation) StoreNumberCleared() bool {
	_, ok := m.clearedFields[device.FieldStoreNumber]
	return ok
}

// ResetStoreNumber resets all changes to the "storeNumber" field.
func (m *DeviceMutation) ResetStoreNumber() {
	m.storeNumber = nil
	delete(m.clearedFields, device.FieldStoreNumber)
}

// SetCreatedAt sets the "createdAt" field.
func (m *DeviceMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *DeviceMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "createdAt" field.
func (m *DeviceMutation) ClearCreatedAt() {
	m.createdAt = nil
	m.clearedFields[device.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "createdAt" field was cleared in this mutation.
func (m *DeviceMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[device.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *DeviceMutation) ResetCreatedAt() {
	m.createdAt = nil
	delete(m.clearedFields, device.FieldCreatedAt)
}

// Where appends a list predicates to the DeviceMutation builder.
func (m *DeviceMutation) Where(ps ...predicate.Device) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DeviceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Device).
func (m *DeviceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DeviceMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, device.FieldName)
	}
	if m.hardwareKey != nil {
		fields = append(fields, device.FieldHardwareKey)
	}
	if m.defaultLayoutId != nil {
		fields = append(fields, device.FieldDefaultLayoutId)
	}
	if m.status != nil {
		fields = append(fields, device.FieldStatus)
	}
	if m.storeNumber != nil {
		fields = append(fields, device.FieldStoreNumber)
	}
	if m.createdAt != nil {
		fields = append(fields, device.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DeviceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case device.FieldName:
		return m.Name()
	case device.FieldHardwareKey:
		return m.HardwareKey()
	case device.FieldDefaultLayoutId:
		return m.DefaultLayoutId()
	case device.FieldStatus:
		return m.Status()
	case device.FieldStoreNumber:
		return m.StoreNumber()
	case device.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DeviceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case device.FieldName:
		return m.OldName(ctx)
	case device.FieldHardwareKey:
		return m.OldHardwareKey(ctx)
	case device.FieldDefaultLayoutId:
		return m.OldDefaultLayoutId(ctx)
	case device.FieldStatus:
		return m.OldStatus(ctx)
	case device.FieldStoreNumber:
		return m.OldStoreNumber(ctx)
	case device.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Device field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeviceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case device.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case device.FieldHardwareKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHardwareKey(v)
		return nil
	case device.FieldDefaultLayoutId:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDefaultLayoutId(v)
		return nil
	case device.FieldStatus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case device.FieldStoreNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStoreNumber(v)
		return nil
	case device.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Device field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DeviceMutation) AddedFields() []string {
	var fields []string
	if m.adddefaultLayoutId != nil {
		fields = append(fields, device.FieldDefaultLayoutId)
	}
	if m.addstatus != nil {
		fields = append(fields, device.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DeviceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case device.FieldDefaultLayoutId:
		return m.AddedDefaultLayoutId()
	case device.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeviceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case device.FieldDefaultLayoutId:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDefaultLayoutId(v)
		return nil
	case device.FieldStatus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Device numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DeviceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(device.FieldName) {
		fields = append(fields, device.FieldName)
	}
	if m.FieldCleared(device.FieldHardwareKey) {
		fields = append(fields, device.FieldHardwareKey)
	}
	if m.FieldCleared(device.FieldDefaultLayoutId) {
		fields = append(fields, device.FieldDefaultLayoutId)
	}
	if m.FieldCleared(device.FieldStatus) {
		fields = append(fields, device.FieldStatus)
	}
	if m.FieldCleared(device.FieldStoreNumber) {
		fields = append(fields, device.FieldStoreNumber)
	}
	if m.FieldCleared(device.FieldCreatedAt) {
		fields = append(fields, device.FieldCreatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DeviceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DeviceMutation) ClearField(name string) error {
	switch name {
	case device.FieldName:
		m.ClearName()
		return nil
	case device.FieldHardwareKey:
		m.ClearHardwareKey()
		return nil
	case device.FieldDefaultLayoutId:
		m.ClearDefaultLayoutId()
		return nil
	case device.FieldStatus:
		m.ClearStatus()
		return nil
	case device.FieldStoreNumber:
		m.ClearStoreNumber()
		return nil
	case device.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Device nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DeviceMutation) ResetField(name string) error {
	switch name {
	case device.FieldName:
		m.ResetName()
		return nil
	case device.FieldHardwareKey:
		m.ResetHardwareKey()
		return nil
	case device.FieldDefaultLayoutId:
		m.ResetDefaultLayoutId()
		return nil
	case device.FieldStatus:
		m.ResetStatus()
		return nil
	case device.FieldStoreNumber:
		m.ResetStoreNumber()
		return nil
	case device.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Device field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DeviceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DeviceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DeviceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DeviceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DeviceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DeviceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DeviceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Device unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DeviceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Device edge %s", name)
}
