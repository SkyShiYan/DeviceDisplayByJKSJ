// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"rpcClient/app/device/service/ent/device"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Device is the model entity for the Device schema.
type Device struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name *string `json:"name,omitempty"`
	// HardwareKey holds the value of the "hardwareKey" field.
	HardwareKey *string `json:"hardwareKey,omitempty"`
	// DefaultLayoutId holds the value of the "defaultLayoutId" field.
	DefaultLayoutId *int32 `json:"defaultLayoutId,omitempty"`
	// Status holds the value of the "status" field.
	Status *int32 `json:"status,omitempty"`
	// StoreNumber holds the value of the "storeNumber" field.
	StoreNumber *string `json:"storeNumber,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Device) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case device.FieldID, device.FieldDefaultLayoutId, device.FieldStatus:
			values[i] = new(sql.NullInt64)
		case device.FieldName, device.FieldHardwareKey, device.FieldStoreNumber:
			values[i] = new(sql.NullString)
		case device.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Device", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Device fields.
func (d *Device) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case device.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case device.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = new(string)
				*d.Name = value.String
			}
		case device.FieldHardwareKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hardwareKey", values[i])
			} else if value.Valid {
				d.HardwareKey = new(string)
				*d.HardwareKey = value.String
			}
		case device.FieldDefaultLayoutId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field defaultLayoutId", values[i])
			} else if value.Valid {
				d.DefaultLayoutId = new(int32)
				*d.DefaultLayoutId = int32(value.Int64)
			}
		case device.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				d.Status = new(int32)
				*d.Status = int32(value.Int64)
			}
		case device.FieldStoreNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field storeNumber", values[i])
			} else if value.Valid {
				d.StoreNumber = new(string)
				*d.StoreNumber = value.String
			}
		case device.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				d.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Device.
// Note that you need to call Device.Unwrap() before calling this method if this Device
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Device) Update() *DeviceUpdateOne {
	return (&DeviceClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Device entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Device) Unwrap() *Device {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Device is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Device) String() string {
	var builder strings.Builder
	builder.WriteString("Device(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	if v := d.Name; v != nil {
		builder.WriteString(", name=")
		builder.WriteString(*v)
	}
	if v := d.HardwareKey; v != nil {
		builder.WriteString(", hardwareKey=")
		builder.WriteString(*v)
	}
	if v := d.DefaultLayoutId; v != nil {
		builder.WriteString(", defaultLayoutId=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := d.Status; v != nil {
		builder.WriteString(", status=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := d.StoreNumber; v != nil {
		builder.WriteString(", storeNumber=")
		builder.WriteString(*v)
	}
	builder.WriteString(", createdAt=")
	builder.WriteString(d.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Devices is a parsable slice of Device.
type Devices []*Device

func (d Devices) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
